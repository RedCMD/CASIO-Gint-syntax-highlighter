{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"scopeName": "source.casio",
	"name": "CASIO SuperH FX-9860G SDK",
	"patterns": [
		{ "include": "#comment" },
		{ "include": "#label" },
		{ "include": "#instruction" },
		{ "include": "#directive" },
		{ "include": "#register" },
		{ "include": "#numeric" },
		{ "include": "#preprocessor-variable" }
	],
	"repository": {
		"comment": {
			"begin": ";",
			"end": "$",
			"patterns": [
				{
					"name": "invalid.illegal",
					"match": "\\\\&\\w*'?"
				}
			],
			"name": "comment.asm"
		},
		"label": {
			"match": "(?<=^(?<WhiteSpace>\\s+)?)(?>\\w++|\\\\&?\\w+'?)++(?(<WhiteSpace>):|:?)|\\b_\\w+\\b",
			"name": "support.function.asm"
		},
		"instruction": {
			"match": "(?<=\\s)(?i:ADD[CV]?|(?>AND|X?OR|TAS|TST)(?>\\.B)?|B[FT](?>[/.]S)?|BRAF?|BSRF?|CLR(?>MAC|[ST])|CMP\\s*/\\s*(?>EQ|G[ET]|H[IS]|P[LZ]|STR)|DIV0[SU]|DIV1|DMUL[SU]\\.L|DT|EXT[SU]\\.[BW]|F(?>ABS|ADD|CMP/(?>EQ|GT)|DIV|LDI[01]|LDS|LOAT|MAC|MOV(?>\\.S)?|MUL|NEG|SQRT|SUB|TRC|STS)|ICBI|JMP|JSR|LDC(?>\\.L)?|LDR[ES]|LDS(?>\\.L)?|LDTLB|MAC(?>\\.[LW])?|MOV(?>\\.[BLW]|(?>[CU]?A|CO|LI)\\.L|[TA])?|MUL\\.L|MUL[SU]\\.W|NEGC?|NO[PT]|OCB(?>[IP]|WB)|PREFI?|ROTC[LR]|ROT[LR]|RT[ES]|SETRC|SET[ST]|SHA[DLR]|SHL[DL]|SHLL(?>[28]|16)?|SHLR(?>[28]|16)?|SLEEP|STC(?>\\.L)?|STS(?>\\.L)?|SUB[CV]?|SWAP(?>\\.[BLW])?|SYNCO|TRAPA|XTRCT)(?=\\s+(?!,)|;|$)",
			"name": "keyword.asm"
		},
		"directive": {
			"patterns": [
				{
					"match": "(?<=\\s|^)\\.(?i:DATA(?>\\.[BLW])?|RES\\.L|SDATA)\\b",
					"name": "keyword.control.asm"
				},
				{
					"match": "(?<=\\s)\\.(?i:AELIF|AELSE|AERROR|AEND[IRW]|AIF(?>DEF)?|ALIGN|ALIMIT|AREPEAT|ASSIGN[AC]|AWHILE|BYTE|CPU|DATA|DEFINE|ENDM?|EQU|(?:(?:EX|IM)PORT)|GLOBAL|LONG|MACRO|ORG|SECTION|SPACE|TEXT|WORD|ZERO)\\b",
					"name": "keyword.control.asm"
				}
			]
		},
		"register": {
			"comment": " R0 to R15, FR0 to FR15, DR0 to DR14 (only even values), XD0 to XD14 (only even values), FV0 to FV12 (only multiples of four), R0_BANK to R7_BANK, SP*, SR, GBR, VBR, MACH, MACL, PR, PC, SSR, SPC, FPUL, FPSCR, MOD, RE, RS, DSR, A0, A0G, A1, A1G, M0, M1, X0, X1, Y0, Y1, XMTRX, DBR, SGR ",
			"comment": " STARTOF, SIZEOF, HIGH, LOW, HWORD, LWORD, $EVEN, $ODD, $EVEN2, $ODD2 ",
			"comment": " $ ",
			"patterns": [
				{
					"match": "(?i)(\\br(?>1[0-5]|\\d)\\b)|@\\g<1>\\+?|@-\\g<1>",
					"name": "variable.asm"
				},
				{
					"match": "\\b(?i:gbr|pc)\\b",
					"name": "variable.asm"
				}
			]
		},
		"double-quote": {
			"match": "\"(.+?)\"",
			"captures": {
				"0": { "name": "string.quoted.double" },
				"1": {
					"patterns": [
						{ "include": "#hexadecimal" },
						{ "include": "#preprocessor-variable" },
						{ "include": "#string" }
					]
				}
			}
		},
		"numeric": {
			"patterns": [
				{ "include": "#hexadecimal" },
				{ "include": "#decimal" },
				{ "include": "#octal" },
				{ "include": "#binary" },
				{
					"match": "#imm",
					"name": "constant.numeric"
				}
			]
		},
		"hexadecimal": {
			"match": "#?H'-?\\h+\\b",
			"name": "constant.numeric.hexadecimal"
		},
		"decimal": {
			"match": "#?(?>D')?-?\\b\\d+\\b",
			"name": "constant.numeric.decimal"
		},
		"octal": {
			"match": "#?Q'-?[0-7]+\\b",
			"name": "constant.numeric.octal"
		},
		"binary": {
			"match": "#?B'-?[01]+\\b",
			"name": "constant.numeric.binary"
		},
		"preprocessor-variable": {
			"name": "support.function.asm",
			"match": "\\\\&?\\w+'?"
		}
	}
}