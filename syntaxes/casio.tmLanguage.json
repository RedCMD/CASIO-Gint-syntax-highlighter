{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"scopeName": "source.casio",
	"name": "CASIO SuperH FX-9860G SDK",
	"patterns": [
		{ "include": "#comment" },
		{ "include": "#label-address" },
		{ "include": "#instruction" },
		{ "include": "#macro" },
		{ "include": "#directive" },
		{ "include": "#register" },
		{ "include": "#operator" },
		{ "include": "#numeric" },
		{ "include": "#preprocessor-variable" },
		{ "include": "#label" }
	],
	"repository": {
		"comment": {
			"match": ";.*",
			"name": "comment.asm"
		},
		"comment-macro": {
			"begin": ";",
			"end": "$",
			"patterns": [
				{
					"name": "invalid.illegal.asm",
					"match": "\\\\&[^']*'?"
				},
				{
					"name": "invalid.illegal.asm",
					"match": "\\\\[$?_a-zA-Z][$?\\w]*'?"
				}
			],
			"name": "comment.asm"
		},
		"label-address": {
			"patterns": [
				{
					"match": "(?<=^(?<WhiteSpace>\\s+)?)(?=[\\\\_a-zA-Z$])(?>[\\w$]++|\\\\&?\\w+')++(?(<WhiteSpace>):|:?)",
					"name": "support.function.preprocessor.asm"
				},
				{
					"match": "(?<=^(?<WhiteSpace>\\s+)?)(?=[\\\\_a-zA-Z$])(?>[\\w$]++|\\\\&?\\w+'?)++(?(<WhiteSpace>):|:?)",
					"name": "support.function.asm"
				},
				{
					"match": "(?<=^(?<WhiteSpace>\\s+)?)\\?[\\w$]{1,16}(?(<WhiteSpace>):|:?)",
					"name": "support.function.asm"
				},
				{
					"match": "\\b_$$\\d{5}\\b",
					"name": "invalid.illegal.asm"
				}
			]
		},
		"label": {
			"patterns": [
				{
					"match": "\\B\\?[\\w$]{1,16}",
					"name": "support.function.asm"
				},
				{
					"match": "\\B\\$[$\\w]+",
					"name": "support.function.asm"
				},
				{
					"match": "\\b[_a-zA-Z][$\\w]+",
					"name": "support.function.asm"
				}
			]
		},
		"instruction": {
			"patterns": [
				{
					"match": "(?i)(?<=\\s)(?>ADD[CV]?|(?>AND|X?OR|TAS|TST)(?>\\.B)?|B[FT](?>/S)?|BRAF?|BSRF?|CLR(?>MAC|S|T)|CMP/(?>EQ|G[ET]|H[IS]|P[LZ]|STR)|DIV0[SU]|DIV1|DMUL[SU]\\.L|DT|EXT[SU]\\.[BW]|ICBI|JMP|JSR|LD[CS](?>\\.L)?|LDR[ES]|LDTLB|MAC(?>\\.[LW])?|MOV(?>\\.[BLW]|A\\.L|T)?|MUL\\.L|MUL[SU]\\.W|NEGC?|NO[PT]|OCB(?>[IP]|WB)|PREFI?|ROTC?[LR]|RT[ES]|SETRC|SET[ST]|SHA[DLR]|SHLD|SHL[LR](?>2|8|16)?|SLEEP|ST[CS](?>\\.L)?|SUB[CV]?|SWAP(?>\\.[BLW])?|SYNCO|TRAPA|XTRCT)(?=\\s+(?!,)|;|$)",
					"name": "keyword.mnemonic.asm"
				},
				{
					"match": "(?i)(?<=\\s)F(?>ABS|ADD|CMP/(?>EQ|GT)|DIV|LDI[01]|LDS|LOAT|MAC|MOV(?>\\.S)?|MUL|NEG|SQRT|SUB|TRC|STS)(?=\\s+(?!,)|;|$)",
					"name": "keyword.mnemonic.float.asm"
				},
				{
					"match": "(?<=(?>^|:)\\s+)[a-zA-Z][a-zA-Z0-9]+(?>[./][a-zA-Z]+)?(?=\\s+(?!,)|;|$)",
					"name": "keyword.mnemonic.unknown.asm markup.italic.asm"
				}
			]
		},
		"macro": {
			"begin": "(?<=\\s|^)\\.(?i:MACRO)\\b",
			"end": "(?<=\\s|^)\\.(?i:ENDM)\\b",
			"captures": { "0": { "name": "keyword.control.macro.asm" } },
			"contentName": "macro.asm",
			"patterns": [
				{ "include": "#comment-macro" },
				{ "include": "$self" }
			]
		},
		"directive": {
			"patterns": [
				{
					"match": "(?<=\\s|^)\\.(?i:DATA(?>\\.[BLW])?|RES\\.L|SDATA)\\b",
					"name": "keyword.control.asm"
				},
				{
					"match": "(?<=\\s)\\.(?i:AELIF|AELSE|AERROR|AEND[IRW]|AIF(?>DEF)?|ALIGN|ALIMIT|AREPEAT|ASSIGN[AC]|AWHILE|BYTE|CPU|DATA|DEFINE|ENDM?|EQU|(?:(?:EX|IM)PORT)|GLOBAL|LONG|MACRO|ORG|SECTION|SPACE|TEXT|WORD|ZERO)\\b",
					"name": "keyword.control.asm"
				}
			]
		},
		"register": {
			"patterns": [
				{
					"comment": "SP == StackPointer == r15",
					"match": "(?i)\\b((?>F?R(?>1[0-5]|\\d)|SP))\\b|(@)\\s*(?<dec>(-)\\s*)?((?>F?R(?>1[0-5]|\\d)|SP))(?(<dec>)\\b|\\s*(\\+)|\\b)",
					"captures": {
						"1": { "name": "variable.asm" },
						"2": { "name": "keyword.operator.pointer.asm" },
						"4": { "name": "keyword.operator.decrement.asm" },
						"5": { "name": "variable.asm" },
						"6": { "name": "keyword.operator.increment.asm" }
					}
				},
				{
					"match": "(?i)\\b(?>DR|XD)(?>1[024]|[02468])\\b",
					"name": "variable.asm"
				},
				{
					"match": "(?i)\\bFV(?>12|[048])\\b",
					"name": "variable.asm"
				},
				{
					"match": "(?i)\\bR[0-7]_BANK\\b",
					"name": "variable.other.constant.asm"
				},
				{
					"match": "(?i)\\b(?>SR|GBR|VBR|MACH|MACL|PR|PC|SSR|SPC|FPUL|FPSCR|MOD|RE|RS|DSR|A0|A0G|A1|A1G|M0|M1|X0|X1|Y0|Y1|XMTRX|DBR|SGR)\\b",
					"name": "variable.other.constant.asm"
				}
			]
		},
		"operator": {
			"patterns": [
				{
					"match": "[-+*/]|[~&|~]|<<|>>",
					"name": "keyword.operator.asm"
				},
				{
					"match": "(?i)\\bSIZEOF\\b",
					"name": "keyword.operator.sizeof.asm"
				},
				{
					"match": "(?i)\\bSTARTOF\\b",
					"name": "keyword.operator.alignof.asm"
				},
				{
					"match": "(?i)\\$(?>EVEN|ODD)2?\\b",
					"name": "keyword.operator.expression.asm"
				},
				{
					"match": "(?i)\\b(?>HIGH|LOW|HWORD|LWORD)\\b",
					"name": "keyword.operator.new.asm"
				}
			]
		},
		"numeric": {
			"patterns": [
				{ "include": "#string" },
				{ "include": "#float" },
				{ "include": "#hexadecimal" },
				{ "include": "#decimal" },
				{ "include": "#octal" },
				{ "include": "#binary" },
				{
					"match": "#imm",
					"name": "constant.numeric.asm"
				}
			]
		},
		"string": {
			"begin": "\"",
			"end": "\"",
			"name": "string.asm",
			"applyEndPatternLast": true,
			"patterns": [
				{
					"match": "\"\"",
					"name": "constant.character.escape.asm"
				},
				{
					"match": "(\")(\")",
					"captures": {
						"1": { "name": "constant.character.escape.asm" },
						"2": { "name": "string.double.quote.asm" }
					}
				}
			]
		},
		"float": {
			"patterns": [
				{
					"match": "\\b[Ff]'(?>\\d+\\.?\\d*|\\.\\d+)(?>[SDsd](?>[+-]?\\d\\d?)?)?\\b",
					"name": "constant.numeric.float.asm"
				},
				{
					"match": "\\b[Hh]'\\h+(?>\\.[SDsd])?\\b",
					"name": "constant.numeric.hexadecimal.float.asm"
				}
			]
		},
		"hexadecimal": {
			"match": "#?[Hh]'-?\\h+\\b",
			"name": "constant.numeric.hexadecimal.asm"
		},
		"decimal": {
			"match": "#?(?>[Dd]')?-?\\b\\d+\\b",
			"name": "constant.numeric.decimal.asm"
		},
		"octal": {
			"match": "#?[Qq]'-?[0-7]+\\b",
			"name": "constant.numeric.octal.asm"
		},
		"binary": {
			"match": "#?[Bb]'-?[01]+\\b",
			"name": "constant.numeric.binary.asm"
		},
		"preprocessor-variable": {
			"patterns": [
				{
					"match": "\\\\&?\\w+'",
					"name": "support.function.preprocessor.asm"
				},
				{
					"match": "\\\\&?\\w+'?",
					"name": "support.function.asm"
				}
			]
		}
	}
}